game.Players.LocalPlayer.Character["SeeMonkey"].Handle.Mesh:Destroy()
game.Players.LocalPlayer.Character["Pink Hair"].Handle.Mesh:Destroy()
game.Players.LocalPlayer.Character["Kate Hair"].Handle.Mesh:Destroy() --LavanderHair
game.Players.LocalPlayer.Character["LavanderHair"].Handle.Mesh:Destroy()
game.Players.LocalPlayer.Character["Robloxclassicred"].Handle.Mesh:Destroy()
--game.Players.LocalPlayer.Character["Surfboard"].Handle.Handle:Destroy()
game.Players.LocalPlayer.Character["VANS_Umbrella"].Handle.Mesh:Destroy()


local c = game.Players.LocalPlayer.Character
for i, v in pairs({"Right Arm", "Left Arm"}) do
    local arm = c[v]
    arm.Parent = nil
    arm.Transparency = 1
    arm.Parent = c
end

local c = game.Players.LocalPlayer.Character
for i, v in pairs({"Right Leg", "Left Leg"}) do
    local Leg = c[v]
    Leg.Parent = nil
    Leg.Transparency = 1
    Leg.Parent = c
end

local v3_net, v3_808 = Vector3.new(0, 25.1, 0), Vector3.new(8, 0, 8)
		local function getNetlessVelocity(realPartVelocity)
			local mag = realPartVelocity.Magnitude
			if mag > 1 then
				local unit = realPartVelocity.Unit
				if (unit.Y > 0.25) or (unit.Y < -0.75) then
					return unit * (25.1 / unit.Y)
				end
			end 
			return v3_net + realPartVelocity * v3_808
		end
		local simradius = "shp" --simulation radius (net bypass) method
--simulation radius (net bypass) method
--"shp" - sethiddenproperty
--"ssr" - setsimulationradius
--false - disable
local antiragdoll = true --removes hingeConstraints and ballSocketConstraints from your character
local newanimate = false --disables the animate script and enables after reanimation
local discharscripts = true --disables all localScripts parented to your character before reanimation
local R15toR6 = true --tries to convert your character to r6 if its r15
local hatcollide = true --makes hats cancollide (only method 0)
local humState16 = true --enables collisions for limbs before the humanoid dies (using hum:ChangeState)
local addtools = false --puts all tools from backpack to character and lets you hold them after reanimation
local hedafterneck = false --disable aligns for head and enable after neck is removed
local loadtime = game:GetService("Players").RespawnTime + 0.5 --anti respawn delay
local method = 0 --reanimation method
--methods:
--0 - breakJoints (takes [loadtime] seconds to laod)
--1 - limbs
--2 - limbs + anti respawn
--3 - limbs + breakJoints after [loadtime] seconds
--4 - remove humanoid + breakJoints
--5 - remove humanoid + limbs
local alignmode = 3 --AlignPosition mode
--modes:
--1 - AlignPosition rigidity enabled true
--2 - 2 AlignPositions rigidity enabled both true and false
--3 - AlignPosition rigidity enabled false

healthHide = healthHide and ((method == 0) or (method == 2) or (method == 000)) and gp(c, "Head", "BasePart")

local lp = game:GetService("Players").LocalPlayer
local rs = game:GetService("RunService")
local stepped = rs.Stepped
local heartbeat = rs.Heartbeat
local renderstepped = rs.RenderStepped
local sg = game:GetService("StarterGui")
local ws = game:GetService("Workspace")
local cf = CFrame.new
local v3 = Vector3.new
local v3_0 = v3(0, 0, 0)
local inf = math.huge

local c = lp.Character

if not (c and c.Parent) then
	return
end

c.Destroying:Connect(function()
	c = nil
end)

local function gp(parent, name, className)
	if typeof(parent) == "Instance" then
		for i, v in pairs(parent:GetChildren()) do
			if (v.Name == name) and v:IsA(className) then
				return v
			end
		end
	end
	return nil
end

local function align(Part0, Part1)
	Part0.CustomPhysicalProperties = PhysicalProperties.new(0.0001, 0.0001, 0.0001, 0.0001, 0.0001)

	local att0 = Instance.new("Attachment", Part0)
	att0.Orientation = v3_0
	att0.Position = v3_0
	att0.Name = "att0_" .. Part0.Name
	local att1 = Instance.new("Attachment", Part1)
	att1.Orientation = v3_0
	att1.Position = v3_0
	att1.Name = "att1_" .. Part1.Name

	if (alignmode == 1) or (alignmode == 2) then
		local ape = Instance.new("AlignPosition", att0)
		ape.ApplyAtCenterOfMass = false
		ape.MaxForce = inf
		ape.MaxVelocity = inf
		ape.ReactionForceEnabled = false
		ape.Responsiveness = 200
		ape.Attachment1 = att1
		ape.Attachment0 = att0
		ape.Name = "AlignPositionRtrue"
		ape.RigidityEnabled = true
	end

	if (alignmode == 2) or (alignmode == 3) then
		local apd = Instance.new("AlignPosition", att0)
		apd.ApplyAtCenterOfMass = false
		apd.MaxForce = inf
		apd.MaxVelocity = inf
		apd.ReactionForceEnabled = false
		apd.Responsiveness = 200
		apd.Attachment1 = att1
		apd.Attachment0 = att0
		apd.Name = "AlignPositionRfalse"
		apd.RigidityEnabled = false
	end

	local ao = Instance.new("AlignOrientation", att0)
	ao.MaxAngularVelocity = inf
	ao.MaxTorque = inf
	ao.PrimaryAxisOnly = false
	ao.ReactionTorqueEnabled = false
	ao.Responsiveness = 200
	ao.Attachment1 = att1
	ao.Attachment0 = att0
	ao.RigidityEnabled = false

	if type(getNetlessVelocity) == "function" then
	    local realVelocity = v3_0
        local steppedcon = stepped:Connect(function()
            Part0.Velocity = realVelocity
        end)
        local heartbeatcon = heartbeat:Connect(function()
            realVelocity = Part0.Velocity
            Part0.Velocity = getNetlessVelocity(realVelocity)
        end)
        Part0.Destroying:Connect(function()
            Part0 = nil
            steppedcon:Disconnect()
            heartbeatcon:Disconnect()
        end)
    end
end

local function respawnrequest()
	local ccfr = ws.CurrentCamera.CFrame
	local c = lp.Character
	lp.Character = nil
	lp.Character = c
	local con = nil
	con = ws.CurrentCamera.Changed:Connect(function(prop)
	    if (prop ~= "Parent") and (prop ~= "CFrame") then
	        return
	    end
	    ws.CurrentCamera.CFrame = ccfr
	    con:Disconnect()
    end)
end

local destroyhum = (method == 4) or (method == 5)
local breakjoints = (method == 0) or (method == 4)
local antirespawn = (method == 0) or (method == 2) or (method == 3)

hatcollide = hatcollide and (method == 0)

addtools = addtools and gp(lp, "Backpack", "Backpack")

local fenv = getfenv()
local shp = fenv.sethiddenproperty or fenv.set_hidden_property or fenv.set_hidden_prop or fenv.sethiddenprop
local ssr = fenv.setsimulationradius or fenv.set_simulation_radius or fenv.set_sim_radius or fenv.setsimradius or fenv.set_simulation_rad or fenv.setsimulationrad

if shp and (simradius == "shp") then
	spawn(function()
		while c and heartbeat:Wait() do
			shp(lp, "SimulationRadius", inf)
		end
	end)
elseif ssr and (simradius == "ssr") then
	spawn(function()
		while c and heartbeat:Wait() do
			ssr(inf)
		end
	end)
end

antiragdoll = antiragdoll and function(v)
	if v:IsA("HingeConstraint") or v:IsA("BallSocketConstraint") then
		v.Parent = nil
	end
end

if antiragdoll then
	for i, v in pairs(c:GetDescendants()) do
		antiragdoll(v)
	end
	c.DescendantAdded:Connect(antiragdoll)
end

if antirespawn then
	respawnrequest()
end

if method == 0 then
	wait(loadtime)
	if not c then
		return
	end
end

if discharscripts then
	for i, v in pairs(c:GetChildren()) do
		if v:IsA("LocalScript") then
			v.Disabled = true
		end
	end
elseif newanimate then
	local animate = gp(c, "Animate", "LocalScript")
	if animate and (not animate.Disabled) then
		animate.Disabled = true
	else
		newanimate = false
	end
end

if addtools then
	for i, v in pairs(addtools:GetChildren()) do
		if v:IsA("Tool") then
			v.Parent = c
		end
	end
end

pcall(function()
	settings().Physics.AllowSleep = false
	settings().Physics.PhysicsEnvironmentalThrottle = Enum.EnviromentalPhysicsThrottle.Disabled
end)

local OLDscripts = {}

for i, v in pairs(c:GetDescendants()) do
	if v.ClassName == "Script" then
		table.insert(OLDscripts, v)
	end
end

local scriptNames = {}

for i, v in pairs(c:GetDescendants()) do
	if v:IsA("BasePart") then
		local newName = tostring(i)
		local exists = true
		while exists do
			exists = false
			for i, v in pairs(OLDscripts) do
				if v.Name == newName then
					exists = true
				end
			end
			if exists then
				newName = newName .. "_"    
			end
		end
		table.insert(scriptNames, newName)
		Instance.new("Script", v).Name = newName
	end
end

c.Archivable = true
local hum = c:FindFirstChildOfClass("Humanoid")
if hum then
	for i, v in pairs(hum:GetPlayingAnimationTracks()) do
		v:Stop()
	end
end
local cl = c:Clone()
if hum and humState16 then
    hum:ChangeState(Enum.HumanoidStateType.Physics)
    if destroyhum then
        wait(1.6)
    end
end
if hum and hum.Parent and destroyhum then
    hum:Destroy()
end

if not c then
    return
end

local head = gp(c, "Head", "BasePart")
local torso = gp(c, "Torso", "BasePart") or gp(c, "UpperTorso", "BasePart")
local root = gp(c, "HumanoidRootPart", "BasePart")
if hatcollide and c:FindFirstChildOfClass("Accessory") then
    local anything = c:FindFirstChildOfClass("BodyColors") or gp(c, "Health", "Script")
    if not (torso and root and anything) then
        return
    end
    torso:Destroy()
    root:Destroy()
    if shp then
        for i,v in pairs(c:GetChildren()) do
            if v:IsA("Accessory") then
                shp(v, "BackendAccoutrementState", 0)
            end 
        end
    end
    anything:Destroy()
    if head then
       head:Destroy()
    end
end

for i, v in pairs(cl:GetDescendants()) do
	if v:IsA("BasePart") then
		v.Transparency = 1
		v.Anchored = false
	end
end

local model = Instance.new("Model", c)
model.Name = model.ClassName

model.Destroying:Connect(function()
	model = nil
end)

for i, v in pairs(c:GetChildren()) do
	if v ~= model then
		if addtools and v:IsA("Tool") then
			for i1, v1 in pairs(v:GetDescendants()) do
				if v1 and v1.Parent and v1:IsA("BasePart") then
					local bv = Instance.new("BodyVelocity", v1)
					bv.Velocity = v3_0
					bv.MaxForce = v3(1000, 1000, 1000)
					bv.P = 1250
					bv.Name = "bv_" .. v.Name
				end
			end
		end
		v.Parent = model
	end
end

if breakjoints then
	model:BreakJoints()
else
	if head and torso then
		for i, v in pairs(model:GetDescendants()) do
			if v:IsA("Weld") or v:IsA("Snap") or v:IsA("Glue") or v:IsA("Motor") or v:IsA("Motor6D") then
				local save = false
				if (v.Part0 == torso) and (v.Part1 == head) then
					save = true
				end
				if (v.Part0 == head) and (v.Part1 == torso) then
					save = true
				end
				if save then
					if hedafterneck then
						hedafterneck = v
					end
				else
					v:Destroy()
				end
			end
		end
	end
	if method == 3 then
		spawn(function()
			wait(loadtime)
			if model then
				model:BreakJoints()
			end
		end)
	end
end

cl.Parent = c
for i, v in pairs(cl:GetChildren()) do
	v.Parent = c
end
cl:Destroy()

local modelDes = {}
for i, v in pairs(model:GetDescendants()) do
	if v:IsA("BasePart") then
		i = tostring(i)
		v.Destroying:Connect(function()
			modelDes[i] = nil
		end)
		modelDes[i] = v
	end
end
local modelcolcon = nil
local function modelcolf()
	if model then
		for i, v in pairs(modelDes) do
			v.CanCollide = false
		end
	else
		modelcolcon:Disconnect()
	end
end
modelcolcon = stepped:Connect(modelcolf)
modelcolf()

for i, scr in pairs(model:GetDescendants()) do
	if (scr.ClassName == "Script") and table.find(scriptNames, scr.Name) then
		local Part0 = scr.Parent
		if Part0:IsA("BasePart") then
			for i1, scr1 in pairs(c:GetDescendants()) do
				if (scr1.ClassName == "Script") and (scr1.Name == scr.Name) and (not scr1:IsDescendantOf(model)) then
					local Part1 = scr1.Parent
					if (Part1.ClassName == Part0.ClassName) and (Part1.Name == Part0.Name) then
						align(Part0, Part1)
						break
					end
				end
			end
		end
	end
end

if (typeof(hedafterneck) == "Instance") and head then
	local aligns = {}
	local con = nil
	con = hedafterneck.Changed:Connect(function(prop)
	    if (prop == "Parent") and not hedafterneck.Parent then
	        con:Disconnect()
    		for i, v in pairs(aligns) do
    			v.Enabled = true
    		end
		end
	end)
	for i, v in pairs(head:GetDescendants()) do
		if v:IsA("AlignPosition") or v:IsA("AlignOrientation") then
			i = tostring(i)
			aligns[i] = v
			v.Destroying:Connect(function()
			    aligns[i] = nil
			end)
			v.Enabled = false
		end
	end
end

for i, v in pairs(c:GetDescendants()) do
	if v and v.Parent then
		if v.ClassName == "Script" then
			if table.find(scriptNames, v.Name) then
				v:Destroy()
			end
		elseif not v:IsDescendantOf(model) then
			if v:IsA("Decal") then
				v.Transparency = 1
			elseif v:IsA("ForceField") then
				v.Visible = false
			elseif v:IsA("Sound") then
				v.Playing = false
			elseif v:IsA("BillboardGui") or v:IsA("SurfaceGui") or v:IsA("ParticleEmitter") or v:IsA("Fire") or v:IsA("Smoke") or v:IsA("Sparkles") then
				v.Enabled = false
			end
		end
	end
end

if newanimate then
	local animate = gp(c, "Animate", "LocalScript")
	if animate then
		animate.Disabled = false
	end
end

if addtools then
	for i, v in pairs(c:GetChildren()) do
		if v:IsA("Tool") then
			v.Parent = addtools
		end
	end
end

local hum0 = model:FindFirstChildOfClass("Humanoid")
if hum0 then
    hum0.Destroying:Connect(function()
        hum0 = nil
    end)
end

local hum1 = c:FindFirstChildOfClass("Humanoid")
if hum1 then
    hum1.Destroying:Connect(function()
        hum1 = nil
    end)
end

if hum1 then
	ws.CurrentCamera.CameraSubject = hum1
	local camSubCon = nil
	local function camSubFunc()
		camSubCon:Disconnect()
		if c and hum1 then
			ws.CurrentCamera.CameraSubject = hum1
		end
	end
	camSubCon = renderstepped:Connect(camSubFunc)
	if hum0 then
		hum0.Changed:Connect(function(prop)
			if hum1 and (prop == "Jump") then
				hum1.Jump = hum0.Jump
			end
		end)
	else
		respawnrequest()
	end
end

local rb = Instance.new("BindableEvent", c)
rb.Event:Connect(function()
	rb:Destroy()
	sg:SetCore("ResetButtonCallback", true)
	if destroyhum then
		c:BreakJoints()
		return
	end
	if hum0 and (hum0.Health > 0) then
		model:BreakJoints()
		hum0.Health = 0
	end
	if antirespawn then
	    respawnrequest()
	end
end)
sg:SetCore("ResetButtonCallback", rb)

spawn(function()
	while c do
		if hum0 and hum1 then
			hum1.Jump = hum0.Jump
		end
		wait()
	end
	sg:SetCore("ResetButtonCallback", true)
end)

R15toR6 = R15toR6 and hum1 and (hum1.RigType == Enum.HumanoidRigType.R15)
if R15toR6 then
    local part = gp(c, "HumanoidRootPart", "BasePart") or gp(c, "UpperTorso", "BasePart") or gp(c, "LowerTorso", "BasePart") or gp(c, "Head", "BasePart") or c:FindFirstChildWhichIsA("BasePart")
	if part then
	    local cfr = part.CFrame
		local R6parts = { 
			head = {
				Name = "Head",
				Size = v3(2, 1, 1),
				R15 = {
					Head = 0
				}
			},
			torso = {
				Name = "Torso",
				Size = v3(2, 2, 1),
				R15 = {
					UpperTorso = 0.2,
					LowerTorso = -100
				}
			},
			root = {
				Name = "HumanoidRootPart",
				Size = v3(2, 2, 1),
				R15 = {
					HumanoidRootPart = 0
				}
			},
			leftArm = {
				Name = "Left Arm",
				Size = v3(1, 2, 1),
				R15 = {
					LeftHand = -0.73,
					LeftLowerArm = -0.2,
					LeftUpperArm = 0.4
				}
			},
			rightArm = {
				Name = "Right Arm",
				Size = v3(1, 2, 1),
				R15 = {
					RightHand = -0.73,
					RightLowerArm = -0.2,
					RightUpperArm = 0.4
				}
			},
			leftLeg = {
				Name = "Left Leg",
				Size = v3(1, 2, 1),
				R15 = {
					LeftFoot = -0.73,
					LeftLowerLeg = -0.15,
					LeftUpperLeg = 0.6
				}
			},
			rightLeg = {
				Name = "Right Leg",
				Size = v3(1, 2, 1),
				R15 = {
					RightFoot = -0.73,
					RightLowerLeg = -0.15,
					RightUpperLeg = 0.6
				}
			}
		}
		for i, v in pairs(c:GetChildren()) do
			if v:IsA("BasePart") then
				for i1, v1 in pairs(v:GetChildren()) do
					if v1:IsA("Motor6D") then
						v1.Part0 = nil
					end
				end
			end
		end
		part.Archivable = true
		for i, v in pairs(R6parts) do
			local part = part:Clone()
			part:ClearAllChildren()
			part.Name = v.Name
			part.Size = v.Size
			part.CFrame = cfr
			part.Anchored = false
			part.Transparency = 1
			part.CanCollide = false
			for i1, v1 in pairs(v.R15) do
				local R15part = gp(c, i1, "BasePart")
				local att = gp(R15part, "att1_" .. i1, "Attachment")
				if R15part then
					local weld = Instance.new("Weld", R15part)
					weld.Name = "Weld_" .. i1
					weld.Part0 = part
					weld.Part1 = R15part
					weld.C0 = cf(0, v1, 0)
					weld.C1 = cf(0, 0, 0)
					R15part.Massless = true
					R15part.Name = "R15_" .. i1
					R15part.Parent = part
					if att then
						att.Parent = part
						att.Position = v3(0, v1, 0)
					end
				end
			end
			part.Parent = c
			R6parts[i] = part
		end
		local R6joints = {
			neck = {
				Parent = Scarf,
				Name = "Neck",
				Part0 = Scarf, --R6parts.torso
				Part1 = Scarf, --R6parts.head
				C0 = cf(0, 1, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
				C1 = cf(0, -0.5, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0)
			},
			rootJoint = {
				Parent = R6parts.root,
				Name = "RootJoint" ,
				Part0 = R6parts.root,
				Part1 = R6parts.torso,
				C0 = cf(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
				C1 = cf(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0)
			},
			rightShoulder = {
				Parent = R6parts.torso,
				Name = "Right Shoulder",
				Part0 = R6parts.torso,
				Part1 = R6parts.rightArm,
				C0 = cf(1, 0.5, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
				C1 = cf(-0.5, 0.5, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0)
			},
			leftShoulder = {
				Parent = R6parts.torso,
				Name = "Left Shoulder",
				Part0 = R6parts.torso,
				Part1 = R6parts.leftArm,
				C0 = cf(-1, 0.5, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),
				C1 = cf(0.5, 0.5, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0)
			},
			rightHip = {
				Parent = R6parts.torso,
				Name = "Right Hip",
				Part0 = R6parts.torso,
				Part1 = R6parts.rightLeg,
				C0 = cf(1, -1, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
				C1 = cf(0.5, 1, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0)
			},
			leftHip = {
				Parent = R6parts.torso,
				Name = "Left Hip" ,
				Part0 = R6parts.torso,
				Part1 = R6parts.leftLeg,
				C0 = cf(-1, -1, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),
				C1 = cf(-0.5, 1, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0)
			}
		}
		for i, v in pairs(R6joints) do
			local joint = Instance.new("Motor6D")
			for prop, val in pairs(v) do
				joint[prop] = val
			end
			R6joints[i] = joint
		end
		hum1.RigType = Enum.HumanoidRigType.R6
		hum1.HipHeight = 0
	end
end



--find rig joints

local function fakemotor()
    return {C0=cf(), C1=cf()}
end

local torso = gp(c, "Torso", "BasePart")
local root = gp(c, "HumanoidRootPart", "BasePart")

local neck = gp(torso, "Neck", "Motor6D")
neck = neck or fakemotor()

local rootJoint = gp(root, "RootJoint", "Motor6D")
rootJoint = rootJoint or fakemotor()

local leftShoulder = gp(torso, "Left Shoulder", "Motor6D")
leftShoulder = leftShoulder or fakemotor()

local rightShoulder = gp(torso, "Right Shoulder", "Motor6D")
rightShoulder = rightShoulder or fakemotor()

local leftHip = gp(torso, "Left Hip", "Motor6D")
leftHip = leftHip or fakemotor()

local rightHip = gp(torso, "Right Hip", "Motor6D")
rightHip = rightHip or fakemotor()

--120 fps

local fps = 0
local event = Instance.new("BindableEvent", c)
event.Name = "120 fps"
local floor = math.floor
fps = 1 / fps
local tf = 0
local con = nil
con = game:GetService("RunService").RenderStepped:Connect(function(s)
	if not c then
		con:Disconnect()
		return
	end
    --tf += s
	if tf >= fps then
		for i=1, floor(tf / fps) do
			event:Fire(c)
		end
		tf = 0
	end
end)
local event = event.Event

local hedrot = v3(0, 5, 0)

local uis = game:GetService("UserInputService")
local function isPressed(key)
    return (not uis:GetFocusedTextBox()) and uis:IsKeyDown(Enum.KeyCode[key])
end

local biggesthandle = nil
for i, v in pairs(c:GetChildren()) do
    if v:IsA("Accessory") and v.Name == "VANS_Umbrella" then
        local handle = gp(v, "Handle", "BasePart")
        if biggesthandle then
            if biggesthandle.Size.Magnitude < handle.Size.Magnitude then
                biggesthandle = Handle
            end
       else
            biggesthandle = gp(v, "Handle", "BasePart")
        end
    end
end

if not biggesthandle then
    return
end

local handle1 = gp(gp(model, biggesthandle.Parent.Name, "Accessory"), "Handle", "BasePart")
if not handle1 then
    return
end

handle1.Destroying:Connect(function()
    handle1 = nil
end)
biggesthandle.Destroying:Connect(function()
    biggesthandle = nil
end)

biggesthandle:BreakJoints()
biggesthandle.Anchored = true

for i, v in pairs(handle1:GetDescendants()) do
    if v:IsA("AlignOrientation") then
        v.Enabled = false
   end
end

local mouse = lp:GetMouse()
local fling = false
mouse.Button1Down:Connect(function()
    fling = true
end)
mouse.Button1Up:Connect(function()
    fling = false
end)
local function doForSignal(signal, vel)
    spawn(function()
        while signal:Wait() and c and handle1 and biggesthandle do
            if fling and mouse.Target then
                biggesthandle.Position = mouse.Hit.Position
            end
            handle1.RotVelocity = vel
        end
    end)
end
doForSignal(stepped, v3(100, 100, 100))
doForSignal(renderstepped, v3(100, 100, 100))
doForSignal(heartbeat, v3(20000, 20000, 20000)) --https://web.roblox.com/catalog/63690008/Pal-Hair

local lp = game:GetService("Players").LocalPlayer
local rs = game:GetService("RunService")
local stepped = rs.Stepped
local heartbeat = rs.Heartbeat
local renderstepped = rs.RenderStepped
local sg = game:GetService("StarterGui")
local ws = game:GetService("Workspace")
local cf = CFrame.new
local v3 = Vector3.new
local v3_0 = Vector3.zero
local inf = math.huge

local cplayer = lp.Character

local v3 = Vector3.new

local function gp(parent, name, className)
    if typeof(parent) == "Instance" then
        for i, v in pairs(parent:GetChildren()) do
            if (v.Name == name) and v:IsA(className) then
                return v
            end
        end
    end
    return nil
end

local hat2 = gp(cplayer, "SeeMonkey", "Accessory")
local handle2 = gp(hat2, "Handle", "BasePart")
local att2 = gp(handle2, "att1_Handle", "Attachment")
att2.Parent = cplayer["Torso"]
att2.Position = Vector3.new(0, -0, 0)
att2.Rotation = Vector3.new(90, 0, 0)

local hat2 = gp(cplayer, "Pink Hair", "Accessory")
local handle2 = gp(hat2, "Handle", "BasePart")
local att2 = gp(handle2, "att1_Handle", "Attachment")
att2.Parent = cplayer["Left Arm"]
att2.Position = Vector3.new(0, -0, 0)
att2.Rotation = Vector3.new(90, 0, 0)

local hat2 = gp(cplayer, "Kate Hair", "Accessory")
local handle2 = gp(hat2, "Handle", "BasePart")
local att2 = gp(handle2, "att1_Handle", "Attachment")
att2.Parent = cplayer["Right Arm"]
att2.Position = Vector3.new(-0, -0, 0)
att2.Rotation = Vector3.new(90, 0, 0) --LavanderHair

local hat2 = gp(cplayer, "LavanderHair", "Accessory")
local handle2 = gp(hat2, "Handle", "BasePart")
local att2 = gp(handle2, "att1_Handle", "Attachment")
att2.Parent = cplayer["Right Leg"]
att2.Position = Vector3.new(0, 0, 0) --Robloxclassicred
att2.Rotation = Vector3.new(90, 0, 0)

local hat2 = gp(cplayer, "Robloxclassicred", "Accessory")
local handle2 = gp(hat2, "Handle", "BasePart")
local att2 = gp(handle2, "att1_Handle", "Attachment")
att2.Parent = cplayer["Left Leg"]
att2.Position = Vector3.new(-0, 0, 0) 
att2.Rotation = Vector3.new(90, 0, 0)

_G.loop = true
local player = game.Players.LocalPlayer
local char = player.Character
local Align = function(Part0, Part1,Mesh)
    local Aligns = {
        AlignOrientation = Instance.new("AlignOrientation", Part0),
        AlignPosition = Instance.new("AlignPosition", Part0)
    }
    
    local Attachments = {
        Attach0 = Instance.new("Attachment", Part0),
        Attach1 = Instance.new("Attachment", Part1)
    }
    local m = Part0:FindFirstChildOfClass('SpecialMesh')--This will get the first "SpecialMesh" it finds if it does not find any, then it will return nil
    if Mesh and m then --If Mesh is set to true and it finds a mesh it will destroy it
        m:Destroy()
    end
    Part0:BreakJoints()
    Aligns.AlignOrientation.Attachment0 = Attachments.Attach0
    Aligns.AlignOrientation.Attachment1 = Attachments.Attach1
    Aligns.AlignOrientation.Responsiveness = math.huge
    Aligns.AlignOrientation.RigidityEnabled = true
    
    Aligns.AlignPosition.Attachment0 = Attachments.Attach0
    Aligns.AlignPosition.Attachment1 = Attachments.Attach1
    Aligns.AlignPosition.Responsiveness = math.huge
    Aligns.AlignPosition.RigidityEnabled = true
        Aligns.AlignPosition.MaxForce = 999999999
        spawn(function()
            while _G.loop do 
                local mag = (Part0.Position - (Part1.CFrame*Attachments.Attach0.CFrame:Inverse()).p).magnitude--magnitude can get the distance between two cframe or position
                if mag >= 5 then 
                Part0.CFrame = Part1.CFrame*Attachments.Attach0.CFrame:Inverse()
                end
                Part0.Velocity = Vector3.new(0,35,0)
                game['Run Service'].Heartbeat:wait()
                end
        end)
 return {Attachments.Attach0, Attachments, Aligns}
        
end 
local hat = Align(char['VANS_Umbrella'].Handle,char['HumanoidRootPart'],false)
local cf = char['HumanoidRootPart'].CFrame*CFrame.new(0,-20,-0)*CFrame.Angles(math.rad(0),math.rad(0),0)
hat[1].CFrame = cf:Inverse() * char['HumanoidRootPart'].CFrame
spawn(function()
    char.AncestryChanged:wait()--if you respawn, it will stop the  loop to avoid lag of using it over and over
    _G.loop = false 
end)
for i,v in pairs (char:GetChildren()) do
	if v:IsA("Accessory") then
		v.Handle.Massless = true
		v.Handle.CustomPhysicalProperties = PhysicalProperties.new(0,0,0,0,0)
	end
end

con = heartbeat:Connect(mainFunction)
mainFunction()

local RootJoint = getjoint("RootJoint")
local RightShoulder = getjoint("Right Shoulder")
local LeftShoulder = getjoint("Left Shoulder")
local RightHip = getjoint("Right Hip")
local LeftHip = getjoint("Left Hip")
local Neck = getjoint("Neck")

local legcfR, legcfL, raydir = cf(1, -1, 0), cf(-1, -1, 0), v3_010 * -2
local function raycastlegs() --this returns 2 values: right leg raycast offset, left leg raycast offset
    local rY, lY = ws:Raycast((cfr * legcfR).Position, raydir, raycastparams), ws:Raycast((cfr * legcfL).Position, raydir, raycastparams)
    return rY and (rY.Position.Y - (cfr.Y-3)) or 0, lY and (lY.Position.Y - (cfr.Y-3)) or 0
end

local function velbycfrvec() --this returns 2 values: forward/backwards movement (from -1 to 1), right/left movement (from -1 to 1)
    local fw, rt = cfr.LookVector * xzvel / walkSpeed, cfr.RightVector * xzvel / walkSpeed
    return fw.X + fw.Z, rt.X + rt.Z
end

addmode("default", {
    idle = function()
        LeftHip.C0 = LeftHip.C0:Lerp(cf(-1, -0.85 + 0.5 * sin(sine * 3), -0.6 - 0.75 * sin(sine * 3)) * angles(-1.2217304763960306 + 0.017453292519943295 * sin((sine + 2) * 6), -1.0471975511965976, -0.6981317007977318 + 0.5235987755982988 * sin((sine + 60) * 3)), deltaTime) 
        RightShoulder.C0 = RightShoulder.C0:Lerp(cf(1, 0.25 + 0.5 * sin((sine + 30) * -3), 0.2 - 0.1 * sin(sine * 3)) * angles(0, 1.3962634015954636 - 0.17453292519943295 * sin(sine * -4), -0.5235987755982988 - 0.5235987755982988 * sin((sine - 60) * -3)), deltaTime) 
        LeftShoulder.C0 = LeftShoulder.C0:Lerp(cf(-1, 0.25 - 0.5 * sin((sine + 30) * 3), -0.1 * sin(sine * 3)) * angles(0, -1.3962634015954636 + 0.17453292519943295 * sin(sine * 4), 0.5235987755982988 + 0.5235987755982988 * sin((sine + 60) * 3)), deltaTime) 
        RootJoint.C0 = RootJoint.C0:Lerp(cf(1 * sin(sine * 3), 1.25 + 1 * sin(sine * 3), -1.5 * sin((sine + 30) * 3)) * angles(-1.1344640137963142 + 0.17453292519943295 * sin(sine * 1), 0.1308996938995747 * sin(sine * 3), 3.141592653589793), deltaTime) 
        RightHip.C0 = RightHip.C0:Lerp(cf(1, -1.25 + 0.5 * sin((sine - 30) * 3), -1) * angles(-0.5235987755982988, 1.2217304763960306, -0.17453292519943295 + 0.5235987755982988 * sin(sine * 3)), deltaTime) 
        --AccessoryWeld.C0 = AccessoryWeld.C0:Lerp(cf(8.658513905857035e-09, 0.7000002861022949, -0.050000011920928955) * angles(0, 0, 0), deltaTime) 
        Neck.C0 = Neck.C0:Lerp(cf(0, 1, -0.1) * angles(-2.181661564992912 + 0.2617993877991494 * sin(sine * 100), 0.17453292519943295, 3.3161255787892263 + 0.017453292519943295 * sin((sine + 2.5) * 3)), deltaTime) 
        --LeftLeg,-1,0,0,,-70,1,2,6,-0.85,0.5,0,3,-60,3,0,,-0.6,-0.75,0,3,-40,30,60,3,RightArm,1,0,0,1,-0,-10,0,,0.25,0.5,30,-3,80,-10,0,-4,0.2,-0.1,0,3,-30,-30,-60,-3,LeftArm,-1,0,0,1,-0,0,0,1,0.25,-0.5,30,3,-80,10,0,4,0,-0.1,0,3,30,30,60,3,Torso,0,1,0,3,-65,10,0,1,1.25,1,0,3,-0,7.5,0,3,0,-1.5,30,3,180,10,0,0,RightLeg,1,0,0,0,-30,0,0,1,-1.25,0.5,-30,3,70,0,0,1,-1,1,90,,-10,30,0,3,PrimeRaven_Handle,8.658513905857035e-09,0,0,1,0,0,0,1,0.7000002861022949,0,0,1,0,0,0,1,-0.050000011920928955,0,0,1,0,0,0,1,Head,0,0,0,1,-125,15,0,100,1,0,0,1,10,0,0,-10,-.1,0,0,1,190,1,2.5,3
    end,
    walk = function()
        RightShoulder.C0 = RightShoulder.C0:Lerp(cf(1, 0.5 * sin(sine * -3), 1 + 0.24 * sin(sine * 3)) * angles(0, 2.0943951023931953 + 0.5235987755982988 * sin(sine * -3), -0.5235987755982988), deltaTime) 
RightHip.C0 = RightHip.C0:Lerp(cf(1 - 0.25 * sin(sine * -3), -1 + 0.25 * sin(sine * 1), -0.8 - 0.5 * sin(sine * 3)) * angles(-0.08726646259971647 * sin(sine * 1), 1.3962634015954636 - 0.2617993877991494 * sin(sine * 3), -0.5235987755982988 - 0.17453292519943295 * sin(sine * 3)), deltaTime) 
RootJoint.C0 = RootJoint.C0:Lerp(cf(0, 2 + 1.5 * sin(sine * 3), 0) * angles(-2.443460952792061, 0, 2.792526803190927 + 0.17453292519943295 * sin(sine * 4)), deltaTime) 
--AccessoryWeld.C0 = AccessoryWeld.C0:Lerp(cf(-0.01117706298828125, -0.05389392375946045, -0.8308497667312622) * angles(0, 0, 0), deltaTime) 
LeftHip.C0 = LeftHip.C0:Lerp(cf(-1, -1, 0) * angles(0, -1.5707963267948966, 0), deltaTime) 
LeftShoulder.C0 = LeftShoulder.C0:Lerp(cf(-1, 1, -0.5 + 0.4 * sin(sine * 3)) * angles(0, -1.5707963267948966, -2.443460952792061 + 0.5235987755982988 * sin((sine + 30) * 3)), deltaTime) 
Neck.C0 = Neck.C0:Lerp(cf(0, 1, 0) * angles(-0.6981317007977318, 0, 3.490658503988659), deltaTime) 
--AccessoryWeld.C0 = AccessoryWeld.C0:Lerp(cf(0, 0.6299999952316284, -0.23000000417232513) * angles(0, 0, 0), deltaTime) 
--RightArm,1,0,0,1,0,0,0,1,0,0.5,0,-3,120,30,0,-3,1,0.24,0,3,-30,0,0,1,RightLeg,1,-0.25,0,-3,0,-5,0,1,-1.,0.25,0,1,80,-15,0,3,-0.8,-0.5,0,3,-30,-10,0,3,Torso,0,0,0,1,-140,0,0,1,2,1.5,0,3,-0,0,0,1,0,0,0,1,160,10,0,4,NebulaBlade_Handle,-0.01117706298828125,0,0,1,-0,0,0,1,-0.05389392375946045,0,0,1,0,0,0,1,-0.8308497667312622,0,0,1,-0,0,0,1,LeftLeg,-1,0,0,1,-0,0,0,1,-1,0,0,1,-90,0,0,1,0,0,0,1,0,0,0,1,LeftArm,-1,0,0,1,-0,60,0,0,1,0,0,1,-90,-30,0,-0,-0.5,0.4,0,3,-140,30,30,3,Head,0,0,0,1,-40,0,0,1,1,0,0,1,-0,0,0,1,0,0,0,1,200,0,0,1,MediHood_Handle,0,0,0,1,0,0,0,1,0.6299999952316284,0,0,1,0,0,0,1,-0.23000000417232513,0,0,1,0,0,0,1
    end,
    jump = function()
        
    end,
    fall = function()
        
    end
})

addmode("e", {
    idle = function()
Neck.C0 = Neck.C0:Lerp(cf(0, 1, 0) * angles(-1.5707963267948966, 0, 3.141592653589793), deltaTime) 
RightHip.C0 = RightHip.C0:Lerp(cf(1.1, 0, -0.25) * angles(0, 1.5707963267948966, 0.8726646259971648), deltaTime) 
RootJoint.C0 = RootJoint.C0:Lerp(cf(0, -0.9 + 0.2 * sin(sine * 1), 0) * angles(-2.443460952792061, 0.17453292519943295 * sin(sine * 2), 3.141592653589793 + 0.17453292519943295 * sin(sine * 3)), deltaTime) 
LeftShoulder.C0 = LeftShoulder.C0:Lerp(cf(-1, 1, -0.5) * angles(0.5235987755982988 + 0.5235987755982988 * sin(sine * 200), -0.8726646259971648, -1.5707963267948966 + 0.05235987755982989 * sin(sine * 1)), deltaTime) 
LeftHip.C0 = LeftHip.C0:Lerp(cf(-1, -1.2, -1) * angles(0, -1.5707963267948966, 0.6981317007977318), deltaTime) 
RightShoulder.C0 = RightShoulder.C0:Lerp(cf(1, 1, -1) * angles(1.5707963267948966, -1.0471975511965976 + 0.5235987755982988 * sin(sine * 100), -1.5707963267948966), deltaTime) 
--Head,0,0,0,1,-90,0,0,1,1,0,0,1,-0,0,0,1,0,0,0,1,180,0,0,1,RightLeg,1.1,0,0,1,0,0,0,1,,0,0,1,90,0,0,1,-0.25,0,0,1,50,0,0,1,Torso,0,0,0,1,-140,0,0,2,-0.9,0.2,0,1,-0,10,0,2,0,0,0,1,180,10,0,3,LeftArm,-1,0,0,1,30,30,0,200,1,0.,0,2,-50,30,0,,-0.5,0,0,1,-90,3,0,1,LeftLeg,-1,0,0,1,-0,0,0,1,-1.2,0,0,1,-90,0,0,1,-1,0,0,1,40,0,0,1,RightArm,1,0,0,1,90,0,0,1,1,0,0,1,-60,30,0,100,-1.,0,0,1,-90,0,0,10
    end
})

addmode("r", {
    idle = function()
LeftShoulder.C0 = LeftShoulder.C0:Lerp(cf(-0.5, 0.5, -0.5) * angles(1.5707963267948966 + 0.17453292519943295 * sin(sine * 1000), -2.443460952792061 + 0.08726646259971647 * sin(sine * 10), -1.2217304763960306 + 0.08726646259971647 * sin(sine * -5)), deltaTime) 
Neck.C0 = Neck.C0:Lerp(cf(0, 1 - 0.1 * sin(sine * 4), 0) * angles(-2.0943951023931953, 0, 3.141592653589793), deltaTime) 
RootJoint.C0 = RootJoint.C0:Lerp(cf(0.5 * sin(sine * 3), 4 + 2 * sin((sine + 0.5) * 3), 1.5 * sin(sine * 3)) * angles(-1.5707963267948966 + 0.6981317007977318 * sin((sine + 30) * 3), 0, 3.141592653589793 + 0.17453292519943295 * sin(sine * 3)), deltaTime) 
RightShoulder.C0 = RightShoulder.C0:Lerp(cf(0.5, 0.5, -0.5) * angles(1.5707963267948966 + 0.17453292519943295 * sin(sine * -1000), 2.443460952792061 + 0.08726646259971647 * sin(sine * 10), 1.2217304763960306 + 0.08726646259971647 * sin(sine * 5)), deltaTime) 
RightHip.C0 = RightHip.C0:Lerp(cf(1, -0.75 + 1 * sin(sine * 3), -1) * angles(-0.6981317007977318, 1.2217304763960306 - 0.17453292519943295 * sin((sine + 30) * 3), 0.3490658503988659 * sin((sine - 30) * -3)), deltaTime) 
LeftHip.C0 = LeftHip.C0:Lerp(cf(-1, -1.5 - 0.5 * sin(sine * 5), -1 - 0.5 * sin((sine + 90) * -3)) * angles(-0.6981317007977318 - 1.5707963267948966 * sin(sine * 3), -1.2217304763960306, 0.5235987755982988 * sin((sine - 30) * 3)), deltaTime) 
--LeftArm,-0.5,0,0,1,90,10,0,1000,0.5,.,0,10,-140,5,0,10,-0.5,0,0,1,-70,5,0,-5,Head,0,0,0,1,-120,0,0,1,1.,-0.1,0,4,-0,0,0,1,0,,0,1,180,0,0,1,Torso,0,0.5,0,3,-90,40,30,3,4,2,0.5,3,-0,0,0,0,0,1.5,0,3,180,10,0,3,RightArm,0.5,0,0,1,90,10,0,-1000,0.5,0,0,10,140,5,0,10,-0.5,0,0,1,70,5,0,5,RightLeg,1,0,0,1,-40,30,0,0,-0.75,1,0,3,70,-10,30,3,-1,0,90,5,-0,20,-30,-3,LeftLeg,-1,0,0,1,-40,-90,0,3,-1.5,-0.5,0,5,-70,30,0,0,-1,-0.5,90,-3,0,30,-30,3
    end
})

addmode("t", {
    walk = function()
RightShoulder.C0 = RightShoulder.C0:Lerp(cf(1, -10, 0) * angles(0, 1.5707963267948966, 0), deltaTime) 
RootJoint.C0 = RootJoint.C0:Lerp(cf(0, -10 + 0.5 * sin(sine * 6), 5 + 0.3 * sin(sine * 6)) * angles(-2.0943951023931953 + 0.08726646259971647 * sin(sine * 6), 0.17453292519943295 * sin(sine * 3), 3.141592653589793 + 0.08726646259971647 * sin(sine * 5)), deltaTime) 
RightHip.C0 = RightHip.C0:Lerp(cf(1, 11.5 + 1 * sin((sine + 60) * 7), -1 + 1 * sin(sine * 7)) * angles(0, -1.5707963267948966 - 0.3490658503988659 * sin((sine + 60) * 6), 0.17453292519943295 + 1.5707963267948966 * sin(sine * 7)), deltaTime) 
LeftShoulder.C0 = LeftShoulder.C0:Lerp(cf(-1, -6, 0) * angles(0, -1.5707963267948966, 0), deltaTime) 
Neck.C0 = Neck.C0:Lerp(cf(0, 12, 0) * angles(-1.5707963267948966, 0, 3.141592653589793), deltaTime) 
LeftHip.C0 = LeftHip.C0:Lerp(cf(-1, 11.5 + 1 * sin((sine + 60) * 7), 1 * sin(sine * 7)) * angles(0, 1.5707963267948966 - 0.3490658503988659 * sin((sine + 60) * 7), 0.17453292519943295 - 1.5707963267948966 * sin(sine * 7)), deltaTime) 
--RightArm,1,0,0,1,0,0,0,1,-10,0,0,1,90,0,0,1,0,0,0,1,0,0,0,1,Torso,0,0,0,1,-120,5,0,6,-10,0.5,0,6,-0,10,0,3,5,0.3,0,6,180,5,0,5,RightLeg,1,0,0,1,0,0,0,1,11.5,1,60,7,-90,-20,60,6,-1,1,0,7,10,90,0,7,LeftArm,-1,0,0,1,-0,0,0,1,-6,3,30,0,-90,0,0,1,0,0,0,0,0,0,0,0,Head,0,0,0,1,-90,0,0,1,12,0,0,1,-0,0,0,1,0,0,0,1,180,0,0,1,LeftLeg,-1,0,0,1,-0,-0,-0,0,11.5,1,60,7,90,-20,60,7,0,1,0,7,10,-90,0,7
    end
})

addmode("q",  {
    walk = function()
LeftHip.C0 = LeftHip.C0:Lerp(cf(-1, -1.25 + 0.5 * sin((sine - 30) * 3), -1) * angles(0, -1.5707963267948966, 0.5235987755982988 + 0.5235987755982988 * sin((sine + 30) * -4)), deltaTime) 
RootJoint.C0 = RootJoint.C0:Lerp(cf(1 * sin(sine * 3), 1.25 + 1 * sin(sine * 3), -1.5 * sin((sine + 30) * 3)) * angles(-1.1344640137963142 + 0.17453292519943295 * sin(sine * 1), 0.1308996938995747 * sin(sine * 3), 3.141592653589793), deltaTime) 
RightShoulder.C0 = RightShoulder.C0:Lerp(cf(1, 1 * sin((sine + 30) * -3), -1 - 0.1 * sin(sine * 3)) * angles(-0.5235987755982988 * sin((sine + 60) * -3), 1.9547687622336491 + 0.5235987755982988 * sin((sine + 60) * 3), 1.7453292519943295 - 0.5235987755982988 * sin((sine - 90) * -3)), deltaTime) 
LeftShoulder.C0 = LeftShoulder.C0:Lerp(cf(-1, 0.25 - 0.5 * sin((sine + 30) * 3), -0.1 * sin(sine * 3)) * angles(0, -1.3962634015954636 + 0.17453292519943295 * sin(sine * 4), 0.5235987755982988 + 0.5235987755982988 * sin((sine + 60) * 3)), deltaTime) 
Neck.C0 = Neck.C0:Lerp(cf(0, 1, -0.1) * angles(-2.181661564992912 + 0.2617993877991494 * sin(sine * 100), 0.17453292519943295, 3.3161255787892263 + 0.017453292519943295 * sin((sine + 2.5) * 3)), deltaTime) 
RightHip.C0 = RightHip.C0:Lerp(cf(1, -1.25 + 0.5 * sin((sine - 30) * 3), -1) * angles(-0.5235987755982988, 1.0471975511965976, -0.17453292519943295 + 0.5235987755982988 * sin(sine * 3)), deltaTime) 
--LeftLeg,-1,0,0,1,-0,0,0,1,-1.25,0.5,-30,3,-90,0,0,1,-1,0.5,0,0,30,30,30,-4,Torso,0,1,0,3,-65,10,0,1,1.25,1,0,3,-0,7.5,0,3,0,-1.5,30,3,180,10,0,0,RightArm,1,0,0,1,-0,-30,60,-3,-,1,30,-3,112,30,60,3,-1,-0.1,0,3,100,-30,-90,-3,LeftArm,-1,0,0,1,-0,0,0,1,0.25,-0.5,30,3,-80,10,0,4,0,-0.1,0,3,30,30,60,3,Head,0,0,0,1,-125,15,0,100,1,0,0,1,10,0,0,-10,-.1,0,0,1,190,1,2.5,3,RightLeg,1,0,0,0,-30,0,0,1,-1.25,0.5,-30,3,60,0,0,1,-1,1,90,,-10,30,0,3
    end
})

addmode("y",  {
    idle = function()
    RightShoulder.C0 = RightShoulder.C0:Lerp(cf(1.75 + 0.25 * sin(sine * 3), 1 + 0.5 * sin((sine + 90) * 3), 0) * angles(3.141592653589793 + 0.5235987755982988 * sin((sine + 30) * 3), -0.5235987755982988 + 0.17453292519943295 * sin((sine + 30) * 3), 0.6981317007977318 - 0.5235987755982988 * sin(sine * 3)), deltaTime) 
    RightHip.C0 = RightHip.C0:Lerp(cf(1, -0.5 - 1 * sin((sine + 30) * 3), -1) * angles(0, 1.5707963267948966 + 0.08726646259971647 * sin((sine + 30) * 5), -0.5235987755982988 + 0.5235987755982988 * sin((sine - 30) * 3)), deltaTime) 
    LeftShoulder.C0 = LeftShoulder.C0:Lerp(cf(-1.5, 0.5 - 0.5 * sin((sine + 90) * 3), -0.5) * angles(0, 0, -0.5235987755982988 + 0.5235987755982988 * sin(sine * -3)), deltaTime) 
    Neck.C0 = Neck.C0:Lerp(cf(0, 1, 0) * angles(-1.5707963267948966, 0, 3.141592653589793 + 6.283185307179586 * sin(sine * 5)), deltaTime) 
    RootJoint.C0 = RootJoint.C0:Lerp(cf(1.5 * sin(sine * 5), 4 + 3 * sin((sine + 30) * 3), 0) * angles(-1.5707963267948966 + 0.17453292519943295 * sin(sine * 3), 0.3490658503988659 * sin((sine + 30) * 3), 3.141592653589793 + 0.2617993877991494 * sin((sine + 30) * 1)), deltaTime) 
    LeftHip.C0 = LeftHip.C0:Lerp(cf(-1, -1 + 1 * sin((sine + 30) * 3), -0.5 + 1 * sin(sine * 3)) * angles(-0.5235987755982988 * sin((sine + 90) * 3), -1.5707963267948966 - 0.2617993877991494 * sin((sine + 60) * 3), 0.5235987755982988 + 1.0471975511965976 * sin((sine + 90) * 3)), deltaTime) 
    --RightArm,1.75,0.25,0,3,180,30,30,3,1,0.5,90,3,-30,10,30,3,0,0,0,1,40,-30,-0,3,RightLeg,1,0,0,1,0,0,-90,3,-0.5,-1,30,3,90,5,30,5,-1,0,-30,3,-30,30,-30,3,LeftArm,-1.5,0,0,3,-0,-0,0,3,0.5,-0.5,90,3,-0,30,30,0,-.5,0,0,1,-30,30,0,-3,Head,0,0,0,1,-90,0,0,1,1,0,0,1,-0,0,0,1,0,0,0,1,180,360,0,5,Torso,0,1.5,0,5,-90,10,0,3,4,3,30,3,-0,20,30,3,0,3,30,0,180,15,30,1,LeftLeg,-1,-0,0,1,-0,-30,90,3,-1,1,30,3,-90,-15,60,3,-0.5,1,0,3,30,60,90,3
    end
})

addmode("u",  {
    idle = function()
   LeftHip.C0 = LeftHip.C0:Lerp(cf(-1, -0.75 + 0.25 * sin((sine + 30) * 3), -0.4 + 0.2 * sin(sine * 3)) * angles(0, -1.3962634015954636, 0.5235987755982988 + 0.3490658503988659 * sin((sine + 30) * 3)), deltaTime) 
RightHip.C0 = RightHip.C0:Lerp(cf(1, -1 + 1.5 * sin((sine + 30) * 3), -0.5 + 0.5 * sin(sine * 3)) * angles(-0.5235987755982988 * sin((sine + 60) * 3), 1.3962634015954636 + 0.08726646259971647 * sin(sine * 3), -0.5235987755982988 + 0.5235987755982988 * sin((sine - 60) * 3)), deltaTime) 
LeftShoulder.C0 = LeftShoulder.C0:Lerp(cf(-1, 0.25 + 0.25 * sin((sine + 30) * 3), 0) * angles(-0.5235987755982988, -1.0471975511965976 - 0.5235987755982988 * sin((sine + 80) * 4), -1.0471975511965976), deltaTime) 
RootJoint.C0 = RootJoint.C0:Lerp(cf(0, 4 + 1 * sin(sine * 3.5), 0) * angles(-2.0943951023931953 - 0.2617993877991494 * sin(sine * 3), 0, 3.141592653589793), deltaTime) 
RightShoulder.C0 = RightShoulder.C0:Lerp(cf(1, 1, -1) * angles(-0.5235987755982988 + 0.5235987755982988 * sin(sine * 100), 0.5235987755982988 * sin(sine * 30), 3.839724354387525), deltaTime) 
Neck.C0 = Neck.C0:Lerp(cf(0, 1, 0) * angles(-2.0943951023931953 - 0.17453292519943295 * sin(sine * 3), 0.5235987755982988 * sin(sine * 100), 3.141592653589793), deltaTime) 
--LeftLeg,-1,0,0,1,-0,0,0,1,-0.75,0.25,30,3,-80,0,0,1,-0.4,0.2,0,3,30,20,30,3,RightLeg,1,0,0,1,0,-30,60,3,-1,1.5,30,3,80,5,0,3,-0.5,0.5,0,3,-30,30,-60,3,LeftArm,-1,0,0,1,-30,0,30,1,0.25,0.25,30,3,-60,-30,80,4,-0,0,30,4,-60,0,0,5,Torso,0,0,0,1,-120,-15,0,3,4,1,0,3.5,-0,0,0,1,0,0,0,1,180,0,0,1,RightArm,1,0,0,1,-30,30,0,100,1,0,0,1,0,30,0,30,-1,0,0,1,220,0,0,1,Head,0,0,0,1,-120,-10,0,3,1,0,0,1,-0,30,0,100,0,0,0,1,180,30,0,0
    end
})

addmode("i",  {
    idle = function()
RightHip.C0 = RightHip.C0:Lerp(cf(1, -0.7, -1.5) * angles(-0.17453292519943295, 2.0943951023931953, -0.7853981633974483 + 0.08726646259971647 * sin(sine * 1)), deltaTime) 
RootJoint.C0 = RootJoint.C0:Lerp(cf(0, -1, 0) * angles(-1.2217304763960306 - 0.08726646259971647 * sin(sine * 1), 0, 2.9670597283903604 + 0.08726646259971647 * sin(sine * 1)), deltaTime) 
--AccessoryWeld.C0 = AccessoryWeld.C0:Lerp(cf(-0.2021636962890625, -0.12768173217773438, -0.2653465270996094) * angles(0, 0, 0), deltaTime) 
RightShoulder.C0 = RightShoulder.C0:Lerp(cf(1, 0.25 + 0.25 * sin(sine * 1), 0) * angles(-0.5235987755982988 - 0.17453292519943295 * sin(sine * 1), 1.2217304763960306 + 0.5235987755982988 * sin((sine + 30) * 1), 0.5235987755982988 + 0.08726646259971647 * sin(sine * 1)), deltaTime) 
--AccessoryWeld.C0 = AccessoryWeld.C0:Lerp(cf(8.658513905857035e-09, 0.7000002861022949, -0.050000011920928955) * angles(0, 0, 0), deltaTime) 
LeftHip.C0 = LeftHip.C0:Lerp(cf(-1, -0.5 + 0.1 * sin(sine * 1), -1.25) * angles(-0.3490658503988659 - 0.17453292519943295 * sin((sine + 90) * 2), -1.5707963267948966 + 0.08726646259971647 * sin((sine + 10) * 2.5), 0), deltaTime) 
LeftShoulder.C0 = LeftShoulder.C0:Lerp(cf(-1, -0.1 - 0.2 * sin(sine * 1), -0.2) * angles(0, -3.141592653589793, -1.9198621771937625 + 0.17453292519943295 * sin((sine + 30) * 1)), deltaTime) 
Neck.C0 = Neck.C0:Lerp(cf(0, 1, 0) * angles(-1.7453292519943295 + 0.17453292519943295 * sin(sine * 1), 0.17453292519943295 + 0.17453292519943295 * sin((sine + 30) * 1), 3.141592653589793), deltaTime) 
--RightLeg,1,0,0,1,-10,0,0,1,-0.7,0,0,1,120,0,0,0,-1.5,0,0,1,-45,5,0,1,Torso,0,0,0,1,-70,-5,0,1,-1,0,0,1,-0,0,0,1,0,0,0,1,170,5,0,1,MeshPartAccessory_Handle,-0.2021636962890625,0,0,1,-0,0,0,1,-0.12768173217773438,0,0,1,0,0,0,1,-0.2653465270996094,0,0,1,-0,0,0,1,RightArm,1,0,0,0,-30,-10,0,1,0.25,0.25,0,1,70,30,30,1,-0,0,0,1,30,5,0,1,PrimeRaven_Handle,8.658513905857035e-09,0,0,1,0,0,0,1,0.7000002861022949,0,0,1,0,0,0,1,-0.050000011920928955,0,0,1,0,0,0,1,LeftLeg,-1,0,0,1,-20,-10,90,2,-0.5,0.1,0,1,-90,5,10,2.5,-1.25,0,30,5,-0,0,0,1,LeftArm,-1,0,0,1,-0,0,0,1,-0.1,-0.2,0,1,-180,0,0,1,-0.2,0,0,1,-110,10,30,1,Head,0,0,0,1,-100,10,0,1,1,0,0,1,10,10,30,1,0,0,0,1,180,0,0,1
    end
})

addmode("o",  {
    idle = function()
RightHip.C0 = RightHip.C0:Lerp(cf(1, -1 + 0.25 * sin(sine * -2), -0.1) * angles(-0.17453292519943295 + 0.17453292519943295 * sin((sine + 990) * -2), 1.2217304763960306, -0.08726646259971647), deltaTime) 
LeftHip.C0 = LeftHip.C0:Lerp(cf(-1, -1.25 + 0.25 * sin(sine * -2), -0.5) * angles(-0.2617993877991494 + 0.17453292519943295 * sin((sine + 990) * -2), -1.2217304763960306, 0.5235987755982988), deltaTime) 
--AccessoryWeld.C0 = AccessoryWeld.C0:Lerp(cf(0, -0.29478001594543457, 0.3294215202331543) * angles(0.3490658503988659, 0, 0), deltaTime) 
RightShoulder.C0 = RightShoulder.C0:Lerp(cf(0.76, 0.5 + 0.25 * sin(sine * 2), -0.4) * angles(0, 2.9670597283903604, 1.5707963267948966 + 0.17453292519943295 * sin((sine + 10) * 2)), deltaTime) 
LeftShoulder.C0 = LeftShoulder.C0:Lerp(cf(-0.76, 0.5 + 0.25 * sin(sine * 2), -0.4) * angles(-0.3490658503988659, -2.9670597283903604, -1.5707963267948966 + 0.17453292519943295 * sin((sine + 10) * -2)), deltaTime) 
RootJoint.C0 = RootJoint.C0:Lerp(cf(0, 0.25 * sin(sine * 2), 0) * angles(-1.3962634015954636 + 0.17453292519943295 * sin((sine + 990) * 2), 0, 3.141592653589793), deltaTime) 
Neck.C0 = Neck.C0:Lerp(cf(0, 1 + 0.05 * sin(sine * 2), 0) * angles(-1.9198621771937625 + 0.13264502315156904 * sin(sine * 2), 0, 3.141592653589793), deltaTime) 
--AccessoryWeld.C0 = AccessoryWeld.C0:Lerp(cf(-0.00006103515625, -0.12335777282714844, 0.0023040771484375) * angles(0.08726646259971647, 0, 0), deltaTime) 
--RightLeg,1,0,0,1,-10,10,990,-2,-1,0.25,0,-2,70,0,0,1,-0.1,0,0,1,-5,10,10,-,LeftLeg,-1,0,0,1,-15,10,990,-2,-1.25,0.25,0,-2,-70,0,0,1,-0.5,0,0,1,30,0,0,1,AzureCrystalHorns_Handle,0,0,0,1,20,0,0,1,-0.29478001594543457,0,0,1,0,0,0,1,0.3294215202331543,0,0,1,-0,0,0,1,RightArm,0.76,0,0,1,-0,0,0,1,0.5,0.25,0,2,170,-0,30,-2,-0.4,0,0,1,90,10,10,2,LeftArm,-0.76,0,0,1,-20,0,0,1,0.5,0.25,0,2,-170,0,10,2,-0.4,0,0,1,-90,10,10,-2,Torso,0,0,0,1,-80,10,990,2,0,0.25,0,2,-0,0,0,1,0,0,0,1,180,0,0,1,Head,0,0,0,1,-110,7.6,0,2,1,0.05,0,2,-0,0,0,1,0,0,0,1,180,30,0,0,RubyOutbackHat_Handle,-0.00006103515625,0,0,1,5,0,0,1,-0.12335777282714844,0,0,1,0,0,0,1,0.0023040771484375,0,0,1,0,0,0,1
    end
})

addmode("p",  {
    walk = function()
RightHip.C0 = RightHip.C0:Lerp(cf(1, -1 + 0.25 * sin(sine * -4), -0.25 + 0.25 * sin(sine * 4)) * angles(0, 1.5707963267948966 + 0.17453292519943295 * sin(sine * 4), -0.5235987755982988 * sin((sine + 90) * 4)), deltaTime) 
RightShoulder.C0 = RightShoulder.C0:Lerp(cf(1, 0.5 + 0.25 * sin(sine * 4), 0.5 * sin(sine * 4)) * angles(0, 1.3962634015954636 + 0.5235987755982988 * sin(sine * 4), -0.5235987755982988 + 0.5235987755982988 * sin((sine + 90) * 4)), deltaTime) 
LeftShoulder.C0 = LeftShoulder.C0:Lerp(cf(-1, 0.5, -0.25 + 0.25 * sin(sine * 4)) * angles(0, -1.7453292519943295 + 0.17453292519943295 * sin((sine + 30) * 4), -1.7453292519943295 + 0.5235987755982988 * sin((sine + 90) * 4)), deltaTime) 
RootJoint.C0 = RootJoint.C0:Lerp(cf(0, 0.25 * sin(sine * 4), 0) * angles(-1.7453292519943295 + 0.08726646259971647 * sin(sine * 4), 0.08726646259971647 * sin((sine + 30) * 4), 3.141592653589793), deltaTime) 
Neck.C0 = Neck.C0:Lerp(cf(0, 1, 0) * angles(-1.9198621771937625 + 0.17453292519943295 * sin(sine * 4), -0.5235987755982988 + 0.17453292519943295 * sin(sine * 4), 3.141592653589793 + 0.17453292519943295 * sin(sine * 4)), deltaTime) 
LeftHip.C0 = LeftHip.C0:Lerp(cf(-1, -1 + 0.25 * sin(sine * -4), -0.25 + 0.25 * sin(sine * 4)) * angles(0, -1.5707963267948966 + 0.17453292519943295 * sin(sine * 4), 0.5235987755982988 * sin((sine - 90) * 4)), deltaTime) 
--RightLeg,1,0,0,1,0,0,0,1,-1,0.25,0,-4,90,10,0,4,-0.25,0.25,0,4,0,-30,90,4,RightArm,1,0,0,1,0,0,0,1,0.5,0.25,0,4,80,30,0,4,,0.5,0,4,-30,30,90,4,LeftArm,-1,0,0,1,-0,0,0,1,0.5,0,0,1,-100,10,30,4,-0.25,0.25,0,4,-100,30,90,4,Torso,0,0,0,1,-100,5,0,4,0,0.25,0,4,-0,5,30,4,0,0,0,1,180,0,0,4,Head,0,0,0,1,-110,10,0,4,1,0,0,1,-30,10,0,4,0,0,0,1,180,10,0,4,LeftLeg,-1,0,0,1,-0,0,0,1,-1.,0.25,0,-4,-90,10,0,4,-0.25,0.25,0,4,0,30,-90,4
    end
})
